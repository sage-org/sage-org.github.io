We are proud to announce the release of Sage 1.1.

Sage is a SPARQL query engine designed for public Linked Data providers.
Thanks to web preemption, the server can run without quotas on query
execution time and consequently process arbitrary long-running queries with
complete results.

The software and an online demo are freely available at:

http://sage.univ-nantes.fr/

The paper explaining the Sage approach [1] is accepted at WWW’19 and
available as a postprint on HAL:
https://hal.archives-ouvertes.fr/hal-02017155

Changes from version 1.0:

## Sage Server:
* SPARQL Unions are supported natively.
* Some SPARQL Filters are supported natively. For now, only logical expression (<, =, &&, …) are allowed.
* The Sage server API now supports plain text SPARQL queries: you can send a SPARQL query using a GET/POST request. See http://sage.univ-nantes.fr/documentation for details.
* For example, you can now call http://sage.univ-nantes.fr/sparql?query=SELECT+%3Fcc+WHERE+%7B+++%3Chttp%3A%2F%2Fdbpedia.org%2Fresource%2FBarack_Obama%3E+%3Chttp%3A%2F%2Fwww.w3.org%2F2002%2F07%2Fowl%23sameAs%3E+%3Fcc+.+%7D+&default-graph-uri=http://sage.univ-nantes.fr/sparql/sameAs


## Sage JS Client 
* Updated to take advantage of new server features
* Uses parallelized Bound joins, as in FedX.


## Sage Java Client:
* Updated to take advantage of new server features
* Uses parallelized Bound joins, as in FedX.
* Some UNIONs and FILTERs are now evaluated server-side.
* OptJoin implementation as described in the WWW’19 paper [1]. The OptJoin algorithm speeds up the evaluation of some OPTIONAL clauses.
* Federated query processing using the FedX model: ASK-based source selection, exclusive groups optimization, extended with the OptJoin support. See the README of the java client https://github.com/sage-org/sage-jena.

## Sage Website:
* New preset queries selection UI, highlighting supported SPARQL features.
* GraphQL support (see the GraphQL tab). GraphQL queries are translated into SPARQL queries, thanks to [4].
* Automatic VOID description generation: http://sage.univ-nantes.fr/void/
* http://sage.univ-nantes.fr/.well-known/void
* New rendering engine based on Mithril.js.
*Monitoring of the progression of query execution. Run the preset query
   <http://sage.univ-nantes.fr/#query=prefix+dbo%3A+%3Chttp%3A%2F%2Fdbpedia.org%2Fontology%2F%3E%0Aprefix+rdfs%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%3E%0A%0ASELECT+%3Fcity+%3Fperson+%3Fname%0AWHERE+%7B%0A++%3Fcity+a+dbo%3ACity%3B%0A++++++++rdfs%3Alabel+%3Fname.%0A++%3Fperson+a+dbo%3APerson%3B%0A++++++++rdfs%3Alabel+%3Fname.%0A%7D%0A&dataset=http%3A%2F%2Fsage.univ-nantes.fr%2Fsparql%2Fdbpedia-2016-04>
   on “Famous people with the same name as a city” to see it in action.


We appreciate your feedback/comments/questions to be sent to our mailing
list [2] or our issue tracker on github [3].

On behalf of the Sage team,

---

Pascal Molli, Hala-Skaf-Molli, Thomas Minier - GDD Team
<https://sites.google.com/site/gddlina/home>, LS2N
<https://www.ls2n.fr/?lang=en>, University of Nantes
<http://www.univ-nantes.fr/>.

[1] Thomas Minier, Hala Skaf-Molli and Pascal Molli. "SaGe: Web Preemption
for Public SPARQL Query services" in Proceedings of the 2019 World Wide Web
Conference (WWW'19), San Francisco, USA, May 13-17, 2019
https://hal.archives-ouvertes.fr/hal-02017155

[2] sage@univ-nantes.fr

[3] https://github.com/sage-org/sage-engine/issues

[4] https://www.npmjs.com/package/graphql-to-sparql
